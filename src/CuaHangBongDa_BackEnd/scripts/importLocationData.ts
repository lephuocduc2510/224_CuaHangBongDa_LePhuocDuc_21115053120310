import axios from 'axios';
import { AppDataSource } from '../data-source';
import { TINH_THANHPHO } from '../entities/tinhThanh.entity';
import { QUAN_HUYEN } from '../entities/huyen.entity';
import { PHUONG_XA } from '../entities/phuongXa.entity';

async function importLocationData() {
  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu...');
    await AppDataSource.initialize();
    console.log('‚úÖ K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu th√†nh c√¥ng');
    
    console.log('üöÄ B·∫Øt ƒë·∫ßu l·∫•y d·ªØ li·ªáu t·ª´ API...');
    
    // S·ª≠ d·ª•ng API t·ª´ provinces.open-api.vn thay th·∫ø
    const provinceRes = await axios.get('https://provinces.open-api.vn/api/p/');
    const provinces = provinceRes.data;
    
    console.log(`üìä ƒê√£ l·∫•y d·ªØ li·ªáu ${provinces.length} t·ªânh/th√†nh ph·ªë`);
    
    // B·∫Øt ƒë·∫ßu transaction
    const queryRunner = AppDataSource.createQueryRunner();
    await queryRunner.connect();
    await queryRunner.startTransaction();
    
    try {
      // X√≥a d·ªØ li·ªáu c≈©
      console.log('üßπ X√≥a d·ªØ li·ªáu c≈©...');
      await queryRunner.query('DELETE FROM PHUONG_XA');
      await queryRunner.query('DELETE FROM QUAN_HUYEN');
      await queryRunner.query('DELETE FROM TINH_THANHPHO');
      
      // ƒê·∫∑t l·∫°i identity
      await queryRunner.query('DBCC CHECKIDENT (\'PHUONG_XA\', RESEED, 0)');
      await queryRunner.query('DBCC CHECKIDENT (\'QUAN_HUYEN\', RESEED, 0)');
      await queryRunner.query('DBCC CHECKIDENT (\'TINH_THANHPHO\', RESEED, 0)');
      
      console.log('‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu c≈©, b·∫Øt ƒë·∫ßu nh·∫≠p d·ªØ li·ªáu m·ªõi...');
      
      let provinceCount = 0;
      let districtCount = 0;
      let wardCount = 0;
      
      // X·ª≠ l√Ω t·ª´ng t·ªânh/th√†nh ph·ªë
      for (const province of provinces) {
        // Th√™m t·ªânh
        const tinhThanh = new TINH_THANHPHO();
        tinhThanh.tenTinhThanh = province.name;
        const savedProvince = await queryRunner.manager.save(tinhThanh);
        provinceCount++;
        
        console.log(`üìç ƒêang nh·∫≠p t·ªânh/th√†nh ph·ªë ${provinceCount}/${provinces.length}: ${tinhThanh.tenTinhThanh} (code: ${province.code})`);
        
        try {
          // L·∫•y danh s√°ch qu·∫≠n/huy·ªán c·ªßa t·ªânh/th√†nh ph·ªë
          const districtsRes = await axios.get(`https://provinces.open-api.vn/api/p/${province.code}?depth=2`);
          const districts = districtsRes.data.districts || [];
          
          console.log(`  ‚Ü≥ ƒêang x·ª≠ l√Ω ${districts.length} qu·∫≠n/huy·ªán c·ªßa ${tinhThanh.tenTinhThanh}`);
          
          // X·ª≠ l√Ω t·ª´ng qu·∫≠n/huy·ªán
          for (const district of districts) {
            // Th√™m qu·∫≠n/huy·ªán
            const quanHuyen = new QUAN_HUYEN();
            quanHuyen.tenQuanHuyen = district.name;
            quanHuyen.maTinhThanhPho = savedProvince.id;
            const savedDistrict = await queryRunner.manager.save(quanHuyen);
            districtCount++;
            
            try {
              // L·∫•y danh s√°ch ph∆∞·ªùng/x√£ c·ªßa qu·∫≠n/huy·ªán
              const wardsRes = await axios.get(`https://provinces.open-api.vn/api/d/${district.code}?depth=2`);
              const wards = wardsRes.data.wards || [];
              
              // T·∫°o c√°c ph∆∞·ªùng/x√£ theo l√¥
              const BATCH_SIZE = 100;
              for (let i = 0; i < wards.length; i += BATCH_SIZE) {
                interface Ward {
                  name: string;
                  code: string;
                }
                
                const wardBatch = wards.slice(i, i + BATCH_SIZE).map((ward: Ward) => {
                  const phuongXa = new PHUONG_XA();
                  phuongXa.tenPhuongXa = ward.name;
                  phuongXa.maQuanHuyen = savedDistrict.id;
                  return phuongXa;
                });
                
                if (wardBatch.length > 0) {
                  await queryRunner.manager.save(PHUONG_XA, wardBatch);
                  wardCount += wardBatch.length;
                }
              }
              
              console.log(`    ‚Ü≥ ƒê√£ th√™m ${wards.length} ph∆∞·ªùng/x√£ v√†o qu·∫≠n/huy·ªán ${quanHuyen.tenQuanHuyen}`);
            } catch (error) {
              console.warn(`    ‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ph∆∞·ªùng/x√£ cho qu·∫≠n/huy·ªán ${district.name} (${district.code}): `);
              continue; // Ti·∫øp t·ª•c v·ªõi qu·∫≠n/huy·ªán ti·∫øp theo
            }
          }
        } catch (error) {
          console.warn(`  ‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu qu·∫≠n/huy·ªán cho t·ªânh/th√†nh ph·ªë ${province.name} (${province.code}): `);
          continue; // Ti·∫øp t·ª•c v·ªõi t·ªânh/th√†nh ph·ªë ti·∫øp theo
        }
      }
      
      // Commit transaction
      await queryRunner.commitTransaction();
      
      console.log('‚úÖ Nh·∫≠p d·ªØ li·ªáu th√†nh c√¥ng!');
      console.log(`üìä T·ªïng s·ªë t·ªânh/th√†nh ph·ªë: ${provinceCount}`);
      console.log(`üìä T·ªïng s·ªë qu·∫≠n/huy·ªán: ${districtCount}`);
      console.log(`üìä T·ªïng s·ªë ph∆∞·ªùng/x√£: ${wardCount}`);
      
      // Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ nh·∫≠p
      const tinhCount = await AppDataSource.getRepository(TINH_THANHPHO).count();
      const huyenCount = await AppDataSource.getRepository(QUAN_HUYEN).count();
      const xaCount = await AppDataSource.getRepository(PHUONG_XA).count();
      
      console.log('üìä S·ªë l∆∞·ª£ng d·ªØ li·ªáu trong CSDL:');
      console.log(`- T·ªânh/th√†nh ph·ªë: ${tinhCount}`);
      console.log(`- Qu·∫≠n/huy·ªán: ${huyenCount}`);
      console.log(`- Ph∆∞·ªùng/x√£: ${xaCount}`);
      
    } catch (error) {
      await queryRunner.rollbackTransaction();
      console.error('‚ùå L·ªói khi nh·∫≠p d·ªØ li·ªáu:', error);
      throw error;
    } finally {
      await queryRunner.release();
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  } finally {
    try {
      await AppDataSource.destroy();
      console.log('üîí ƒê√£ ƒë√≥ng k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu');
    } catch (e) {
      console.error('‚ùå L·ªói khi ƒë√≥ng k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu:', e);
    }
  }
}

// Ch·∫°y h√†m import
console.log('üìã B·∫Øt ƒë·∫ßu qu√° tr√¨nh nh·∫≠p d·ªØ li·ªáu ƒë·ªãa ch√≠nh Vi·ªát Nam...');
importLocationData().catch(error => {
  console.error('‚ùå L·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c:', error);
  process.exit(1);
});